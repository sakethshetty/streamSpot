// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
   //engineType = "library" 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  email           String      @unique
  password        String
  name            String      @unique
  channels        Channel[]   // it helps to represent the relationship b/w channel model
  //subscribedChannels Channel[] @relation("Subscriptions", references: [id]) // it helps to represent the relationship b/w channel model
  posts           Post[]      // it helps to represent the relationship b/w post model
}

// it is a channel model to store information about some user channels. 
model Channel {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
   imageUrl      String
  description   String?
  creator       User        @relation(fields: [creatorId], references: [id])
  creatorId     String      @map("_creatorId") @db.ObjectId // it is FK to User model
  videos        Video[]     // one channel may have many videos so(1-many) 
  // subscribers User[]    @relation("Subscriptions", references: [id]) // (it is like m:n)relationship with users subscribing to channels
}

// it is video model to store information about user-uploaded their videos
model Video {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  url           String      //we will store video URLs
  //thumbnail     String?     // it is for thumbnail URL
  likes         Int         @default(0)
  dislikes      Int         @default(0)
  comments      Comment[]   // (it is 1:n ) relationship with comments models. 
  channel       Channel     @relation(fields: [channelId], references: [id])
  channelId     String      @map("_channelId") @db.ObjectId // FK to Channel model
}

// it is post model to store user posts
model Post {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  imageUrl      String
  likes         Int         @default(0)
  dislikes      Int         @default(0)
  comments      Comment[]   // (it is 1:n) relationship with comments
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("_userId") @db.ObjectId // FK to User model
}

// Comment model to store comments for videos and posts
model Comment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  likes         Int         @default(0)
  dislikes      Int         @default(0)
  video         Video?      @relation(fields: [videoId], references: [id])
  videoId       String?     @map("_videoId") @db.ObjectId
  post          Post?       @relation(fields: [postId], references: [id])
  postId        String?     @map("_postId") @db.ObjectId
}
